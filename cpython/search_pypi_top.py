#!/usr/bin/python3 -u
import datetime
import os
import re
import sys
import tarfile
import zipfile


pypi_dir = "PYPI-2021-12-01-TOP-5000"
IGNORE_CYTHON = True
IGNORED_FILE_EXTENSIONS = (".so,")

# "/* Generated by Cython 0.29.13 */"
CYTHON_REGEX = re.compile(br'^/\* Generated by Cython [0-9]+(.[0-9]+)+ \*/')


def output(msg):
    print(f"# {msg}", file=sys.stderr, flush=True)


def log(msg):
    print(f"# {msg}", file=sys.stderr, flush=True)


def decompress_tar(filename, mode):
    with tarfile.open(filename, mode) as tar:
        while True:
            member = tar.next()
            if member is None:
                break
            name = member.name
            if name.endswith(IGNORED_FILE_EXTENSIONS):
                continue
            fp = tar.extractfile(member)
            if fp is None:
                continue
            with fp:
                yield (name, fp)


def decompress_zip(filename):
    with zipfile.ZipFile(filename) as zf:
        for member in zf.filelist:
            name = member.filename
            if name.endswith(IGNORED_FILE_EXTENSIONS):
                continue
            with zf.open(member) as fp:
                yield (name, fp)


def decompress(filename):
    if filename.endswith((".tar.gz", ".tgz")):
        yield from decompress_tar(filename, "r:gz")
    elif filename.endswith(".tar.bz2"):
        yield from decompress_tar(filename, "r:bz2")
    elif filename.endswith(".zip"):
        yield from decompress_zip(filename)
    else:
        raise Exception(f"unsupported filename: {filename!r}")


def grep(filename, regex):
    for name, fp in decompress(filename):
        matchs = []
        ignore = False
        for line in fp:
            if IGNORE_CYTHON and CYTHON_REGEX.match(line):
                log(f"ignore file generated by Cython: {filename}: {name}")
                ignore = True
                break
            if regex.search(line):
                matchs.append((name, line))

        if matchs and not ignore:
            yield from matchs


def search(pypi_dir, pattern):
    regex = re.compile(pattern)
    for filename in os.listdir(pypi_dir):
        filename = os.path.join(pypi_dir, filename)
        log(f"grep {filename}")
        for name, line in grep(filename, regex):
            line = line.decode('utf8', 'replace').strip()
            yield (filename, name, line)


def main():
    if len(sys.argv) < 3:
        print(f"usage: python {sys.argv[0]} REGEX OUTPUT_FILENAME")
        sys.exit(1)
    arg = sys.argv[1]
    output_filename = sys.argv[2]
    pattern = os.fsencode(arg)

    start_time = datetime.datetime.now()
    with open(output_filename, "w", encoding="utf8") as output:
        lines = 0
        projects = set()
        for archive_name, filename, line in search(pypi_dir, pattern):
            result = f"{archive_name}: {filename}: {line}"
            print(result, flush=True)
            print(result, file=output, flush=True)
            lines += 1
            projects.add(archive_name)

    dt = datetime.datetime.now() - start_time
    print()
    print(f"Time: {dt}")
    print(f"Found {lines} matching lines in {len(projects)} projects")
    print(f"Output written into: {output_filename}")


if __name__ == "__main__":
    main()
